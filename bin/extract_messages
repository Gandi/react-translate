#!/bin/bash

# Check arguments
if [[ $# -eq 0 ]] ; then
    echo 'No argument supplied. You must supply the directory' \
    'from which to extract messages and the namespace'
    exit 1
fi

if [[ $# -eq 1 ]] ; then
    echo 'You must supply the namespace in which to extract messages'
    exit 1
fi

echo "This script extracts translations from the passed diretory and generates "
echo "a json file in a fake locale 'template', that serves the purposes of a .pot file."
echo "You will then need to run the \`update_catalog\` script to populate "
echo "the real locales with the new translations that were found."
echo ""

hash pybabel 2>/dev/null || { echo >&2 "Please install pybabel and try again \
(\`apt install python-pybabel\` or \`pip install babel\`)."; exit 1; }

CURRENT_DIR="$(pwd)"
APP_DIR=$1
NAMESPACE=$2
FILENAME=locales/template/${NAMESPACE}.json

echo "# Extracting to the '${NAMESPACE}' namespace from ${APP_DIR}"
TMP_BABEL_DIR=$CURRENT_DIR/tmp_babel_compiled
mkdir -p $TMP_BABEL_DIR
POT_FILE=${TMP_BABEL_DIR}/locales/translations.pot
mkdir -p $TMP_BABEL_DIR/locales/
mkdir -p $CURRENT_DIR/locales/template/

set -e
# Transpile ES6 to ES5 js, as pybabel chokes on some JSX constructs.
node_modules/.bin/babel $APP_DIR --out-dir $TMP_BABEL_DIR > /dev/null

# Don't confuse babeljs with pybabel. ;)
pybabel extract -F pybabel.cfg --omit-header --sort-output \
    -k __:1 --no-default-keywords -o $POT_FILE $TMP_BABEL_DIR  &> /dev/null
node_modules/.bin/po2json $POT_FILE $FILENAME -f mf --pretty --fallback-to-msgid

echo -e "  \e[32mSuccessfully extracted messages to ${FILENAME}\e[0m"

# clean
rm $POT_FILE
rm -r $TMP_BABEL_DIR

# merge external libs messages
node_modules/.bin/merge_catalogs $2

# rewrite plurals
node_modules/.bin/create_counterpart_plurals
set +e
