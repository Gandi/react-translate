#!/usr/bin/env node

/* eslint no-var: 0 */
/* eslint vars-on-top: 0 */
/* eslint func-names: 0 */
/* eslint no-throw-literal: 0 */

/*
 * Once you have run the `extract_messages` script and found
 * new messages (translation "keys"), you can run this script to
 * populate each locale's json translation file with the existing
 * ones with the new messages that were found.
 */

var _ = require('lodash');
var fs = require('fs');
var glob = require('glob');
var helpers = require('./helpers');


helpers.log('');
helpers.log('# Updating catalog...');

// Update translation files.
glob('locales/*/*.json', {}, function (er, files) {
  if (er) {
    helpers.error('Error reading files');
    throw er;
  }

  if (!files.length) {
    helpers.warn('  No translation files');
    helpers.log('  Make sure you have a folder `locales` with translation files');
    return true;
  }

  return _.each(files, function (file) {
    var path = file;
    if (path.match(/template\/[^/]+\.json$/)) {
      return true;
    }

    var oldJson = JSON.parse(fs.readFileSync(path, 'utf-8'));

    var sourceGlob = path.replace(/(.*)\/[\w_]+\/(.*)/, '$1/template/$2');

    return glob(sourceGlob, {}, function (er_, sourceFiles) {
      if (er_) {
        helpers.error('Error reading files');
        throw er_;
      }

      _.each(sourceFiles, function (sourcePath) {
        var sourceJson = JSON.parse(fs.readFileSync(sourcePath, 'utf-8'));

        // New translations should have an empty translation.
        sourceJson = _.mapValues(sourceJson, function () {
          return '';
        });
        var newJson = _.defaults(oldJson, sourceJson);

        var printableJson = JSON.stringify(helpers.sortObject(newJson), null, 4);

        // Add a trailing space at the end of each line that ends with a comma,
        // like Weblate does, so the diffs will be easier to read.
        printableJson = printableJson.replace(/,(?:\r\n|\r|\n)/mg, ', \n');

        fs.writeFile(path, printableJson, function (err) {
          if (err) {
            helpers.error('File save error');
            throw err;
          }
          helpers.success('  Successfully saved file `' + file + '`');
        });
      });
    });
  });
});
